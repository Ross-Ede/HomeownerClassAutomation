Option Explicit

'AUTO DAILY DATA COLLECTION---------------------------------------------------------------------------------------
'Global Variables
Dim finalMasterRow As Integer
Dim finalDailyRow As Integer
Dim finalSurveyRow As String

Dim masterSheetNames As String
Dim masterSheetEmails As String
Dim testNames As String

Dim folderPath As String
Dim dailyFileName As String
Dim surveyFile As String

Dim lNameCol As String
Dim fNameCol As String
Dim countyCol As String
Dim cityCol As String
Dim zipCol As String
Dim addressCol As String
Dim emailCol As String
Dim phoneCol As String
Dim enrollDateCol As String
Dim passDateCol As String
Dim certCol As String
Dim optCertCol As String
Dim flCol As String
Dim ceaContactCol As String
Dim ceaEmailCol As String
Dim ceaEmailCCCol As String
Dim ceaWebsite As String
Dim drContactCol As String
Dim ceaOfficeEmailCol As String
Dim drEmailCol As String
Dim missingEmailCol As String
Dim certDateCol As String
Dim emptyCol1 As String
Dim emptyCol2 As String
Dim userIDcol As String
Dim purpCol As String
Dim manufCol As String
Dim AuthAgentCol As String
Dim notesCol As String

' This function is what allows for column variability/moving. All that is required that the column names rename the same
' In The Event A column name needs to be changed: seek the old column name in the function below, and rename it
' removing columns has no effect on the program unless it is a crucial column such as name or address etc.
Sub getCols()
    Dim Cell As Range
    Dim ColLetter As String
    Dim ws As Worksheet
    Set ws = Workbooks("List-OnlineClass").Worksheets("log")
    
    For Each Cell In ws.Range("A1:BZ1")
        If IsError(Cell.Value) Then GoTo continue
        
        ColLetter = ColLetterHelper(Cell.Column)
        
        Select Case LCase(Cell.Value)
            Case "last name": lNameCol = ColLetter
            Case "technology": manufCol = ColLetter
            Case "notes": notesCol = ColLetter
            Case "aa": AuthAgentCol = ColLetter
            Case "date assignment submission completed": purpCol = ColLetter
            Case "userid": userIDcol = ColLetter
            Case "first name": fNameCol = ColLetter
            Case "county": countyCol = ColLetter
            Case "email": emailCol = ColLetter
            Case "date enrolled (auto report)": enrollDateCol = ColLetter
            Case "zip": zipCol = ColLetter
            Case "city": cityCol = ColLetter
            Case "address": addressCol = ColLetter
            Case "phone": phoneCol = ColLetter
            Case "date final test passed (auto email)": passDateCol = ColLetter
            Case "certificate": certCol = ColLetter
            Case "firstlast": flCol = ColLetter
            Case "cea contact": ceaContactCol = ColLetter
            Case "cea email": ceaEmailCol = ColLetter
            Case "cea email cc": ceaEmailCCCol = ColLetter
            Case "cea office email": ceaOfficeEmailCol = ColLetter
            Case "cea website": ceaWebsite = ColLetter
            Case "dr contact": drContactCol = ColLetter
            Case "dr email": drEmailCol = ColLetter
            Case "missing info?": missingEmailCol = ColLetter
            Case "date certificate emailed to cea": certDateCol = ColLetter
            Case "optional certificate": optCertCol = ColLetter
            Case Else
                If Cell.Value = "" And emptyCol1 = "" Then
                    emptyCol1 = ColLetter
                ElseIf Cell.Value = "" And emptyCol2 = "" And emptyCol1 <> ColLetter Then
                    emptyCol2 = ColLetter
                End If
        End Select
        
continue:
    Next Cell
End Sub

'Helper method for getCols
Function ColLetterHelper(colNum As Long) As String
    ColLetterHelper = Split(Cells(1, colNum).Address(True, False), "$")(0)
End Function

Sub lastRow(book, sheet) 'this function is used to find the last row in any sheet passed into it; In this program its mainly for the master sheet and daily sheet
     Dim last As Integer
    Dim Cell As Range
    If book <> "List-OnlineClass" And InStr(book, "survey") = 0 Then 'checking if daily book, if not its the main book
        Workbooks.Open (folderPath + dailyFileName)
        finalDailyRow = Workbooks(dailyFileName).Worksheets(sheet).Range("A:A").Find(What:="", LookIn:=xlValues).Row
    ElseIf InStr(book, "survey") = 0 Then
        finalMasterRow = Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & ":" & lNameCol).Find(What:="", LookIn:=xlValues).Row
    Else
        Workbooks.Open (folderPath + surveyFile)
        finalSurveyRow = Workbooks(surveyFile).Worksheets(sheet).Range("A:A").Find(What:="", LookIn:=xlValues).Row
    End If
End Sub

'names from master sheet, and addresses (address added later in order to account for enrollments with same names)
'this is rather deprecated now and is mainly just for making sure tester names arent re-added
Sub getNames()
    Dim x As Integer
    masterSheetNames = ""
    masterSheetEmails = ""
    testNames = "calvertcaitlynshoemakerkatlinbrownbrigittemooretarahramirezmichellematzkecaseyhomeyermeganwilsoncalliedworaczykbrettolivarezvincebaggettkristinbonaitigabrielejantraniaanishgerlichryansegurajoshua "
    lastRow "List-OnlineClass", "log" 'NOTE THIS IS HARDCODED AND IN OTHER SPOTS, FUTURE CHANGE WILL ALLOW USER TO SAVE TO ANY SHEET
    
    For x = 2 To finalMasterRow  'Previous Names    Current Last Name                                                         Current First Name
        masterSheetNames = LCase(masterSheetNames & Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & x).Value) & LCase(Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & x).Value)
        masterSheetEmails = LCase(masterSheetEmails & Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & x).Value)
    Next
End Sub

'removing the word "county" from county column so Dr. Bonaiti's formula works
Sub removeKeyWord()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    Dim ws As Worksheet
    Dim countyData As Variant
    Dim i As Long
    Dim lastRow As Long
    Dim countyColLetter As String
    Dim countyColNum As Long
    
    Set ws = Workbooks("List-OnlineClass").Worksheets("log")
    
    countyColLetter = countyCol ' Your existing column letter, e.g., "B"
    countyColNum = ws.Range(countyCol & "1").Column ' Convert to column number
    
    lastRow = finalMasterRow
    
    ' Read range into array
    countyData = ws.Range(ws.Cells(2, countyColNum), ws.Cells(lastRow, countyColNum)).Value
    
    ' Loop through array and replace keywords
    For i = 1 To UBound(countyData, 1)
        countyData(i, 1) = Replace(countyData(i, 1), " county", "")
        countyData(i, 1) = Replace(countyData(i, 1), " County", "")
    Next i
    
    ' Write modified array back to sheet
    ws.Range(ws.Cells(2, countyColNum), ws.Cells(lastRow, countyColNum)).Value = countyData
    

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub
    
'allowing for mass update for multiple previous days missed, looks at the last time the file was update and looks at all files with dates in between then and now
Sub autoBulkUpdate()
  
    MsgBox "Please avoid using Excel while this process runs to prevent disruptions.", vbOKOnly + vbInformation, "Notice"

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ActiveWindow.Zoom = 100 ' Prevent positioning issues
    
    'exactly what troubleshoot does, added this because on Dr. Bonaiti ends it requires him to troubleshoot everytime?
    getCols
    lastRow "List-OnlineClass", "log"
    removeKeyWord
    
    Dim dailyFound As Boolean
    dailyFound = False
    
    getNames
    
    Dim newEnrollments As Integer
    Dim passes As Integer
    Dim fileCount As Integer
    
    Dim systemDate As String
    systemDate = Date
    'generate date in file name
    
    'if generated date from file is new relative to last update, use that file
    'Note: using right function to start from right and get date, +3 to acccount for .csv
    'Note: standard daily file name format as follows; baen_daily_enrollment_report_2023-06-16.csv
    Dim file As String
    Dim fileMonth As String
    Dim fileDay As String
    Dim fileYear As String
    
    'Helpful https://stackoverflow.com/questions/10380312/loop-through-files-in-a-folder-using-vba
    folderPath = ThisWorkbook.Path + "\"
    file = Dir(folderPath)
    Do While Len(file) > 0
        If InStr(file, "baen") = 0 Then
            GoTo NextIteration
        End If
        
        fileDay = Left(Right(file, 6), 2)
        fileMonth = Left(Right(file, 9), 2)
        fileYear = Left(Right(file, 14), 4)
        
        Dim fileDate
        fileDate = fileMonth & "/" & fileDay & "/" & fileYear
        
        'update master log with new data here, then iterate to next
        If (CDate(fileDate) >= CDate(Workbooks("List-OnlineClass").Worksheets("Menu").Range("A23").Value)) Then
            dailyFound = True
            dailyFileName = file
            fileCount = fileCount + 1
            
            'now here is where names from daily sheet are compared to master sheet and if new, added
            lastRow dailyFileName, 1
            Dim currDailyName As String
            Dim currDailyEmail As String
            Dim currDailyUserID
            Dim i As Integer
            For i = 2 To finalDailyRow - 1
                Dim testPassDate As String
                Dim temporary As String
                currDailyUserID = Workbooks(dailyFileName).Worksheets(1).Range("C" & i).Value
                currDailyName = LCase(Workbooks(dailyFileName).Worksheets(1).Range("A" & i).Value) + LCase(Workbooks(dailyFileName).Worksheets(1).Range("B" & i).Value)
                currDailyEmail = LCase(Workbooks(dailyFileName).Worksheets(1).Range("D" & i).Value)
                If Workbooks("List-OnlineClass").Worksheets("log").Columns(userIDcol).Find(What:=currDailyUserID, LookIn:=xlValues, LookAt:=xlWhole) Is Nothing Then 'NOTE VBA DOES NOT SHORTCIRCUIT Or (InStr(masterSheetEmails, currDailyEmail) = 0 And InStr(testNames, currDailyName) = 0) Then 'if not in list then add to it
                    masterSheetEmails = masterSheetEmails + currDailyEmail
                    masterSheetNames = masterSheetNames + currDailyName
                    
                    newEnrollments = newEnrollments + 1

                    Workbooks("List-OnlineClass").Worksheets("log").Rows(finalMasterRow - 1).Copy
                    Workbooks("List-OnlineClass").Worksheets("log").Rows(finalMasterRow).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                    Workbooks("List-OnlineClass").Worksheets("log").Rows(finalMasterRow).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                    Workbooks("List-OnlineClass").Worksheets("log").Rows(finalMasterRow).PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                    Workbooks("List-OnlineClass").Worksheets("log").Range(passDateCol & finalMasterRow).Value = ""
            
                    'master log values being set to daily log values
                    Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("A" & i).Value 'LastName
                    Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("B" & i).Value 'FirstName
                    Workbooks("List-OnlineClass").Worksheets("log").Range(countyCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("I" & i).Value 'County
                    Workbooks("List-OnlineClass").Worksheets("log").Range(cityCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("H" & i).Value 'City
                    Workbooks("List-OnlineClass").Worksheets("log").Range(zipCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("K" & i).Value 'Zip Code
                    Workbooks("List-OnlineClass").Worksheets("log").Range(addressCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("F" & i).Value 'Address
                    Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("D" & i).Value 'Email
                    Workbooks("List-OnlineClass").Worksheets("log").Range(phoneCol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("E" & i).Value 'Phone
                    Workbooks("List-OnlineClass").Worksheets("log").Range(userIDcol & finalMasterRow).Value = Workbooks(dailyFileName).Worksheets(1).Range("C" & i).Value 'user ID
                    
                    'copying over website/assignment time data/metadata
                    Workbooks("List-OnlineClass").Worksheets("log").Range("AV" & finalMasterRow & ":" & "BD" & finalMasterRow).Copy Workbooks(dailyFileName).Worksheets(1).Range("T" & i & ":" & "AD" & i)
                   
                    
                    'Enrollment Date | EX. convert 2023-05-03 16:11:31.307000-05:00 to 05/03/2023
                    Dim enrollDay As String
                    
                    Dim temp As String
                    temp = Workbooks(dailyFileName).Worksheets(1).Range("N" & i).Value
                    
                    enrollDay = Mid(temp, 6, 2) & "/" & Mid(temp, 9, 2) & "/" & Left(temp, 4)
                    
                    Workbooks("List-OnlineClass").Worksheets("log").Range(enrollDateCol & finalMasterRow).Value = enrollDay
                    
                    'Check if they passed, if they did add date they did to master log
                    If Workbooks(dailyFileName).Worksheets(1).Range("Q" & i).Value = 100 Then
                        passes = passes + 1
                    
                        temporary = Workbooks(dailyFileName).Worksheets(1).Range("S" & i).Value
                        
                        testPassDate = Mid(temporary, 6, 2) & "/" & Mid(temporary, 9, 2) & "/" & Left(temporary, 4)
                        
                        Workbooks("List-OnlineClass").Worksheets("log").Range(passDateCol & finalMasterRow).Value = testPassDate
                    End If
                    
                    'removing county keyword so formulas work
                    Workbooks("List-OnlineClass").Worksheets("log").Range(countyCol & finalMasterRow).Value = Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(countyCol & finalMasterRow).Value, " county", "")
                    Workbooks("List-OnlineClass").Worksheets("log").Range(countyCol & finalMasterRow).Value = Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(countyCol & finalMasterRow).Value, " County", "")
                                                            
                    finalMasterRow = finalMasterRow + 1
                Else
                    'Check if they passed, if they did add date they did to master log
                    If Workbooks(dailyFileName).Worksheets(1).Range("Q" & i).Value = 100 And InStr(testNames, currDailyName) = 0 Then
                        'find what row theyre in
                        Dim matchRow

                        matchRow = Workbooks("List-OnlineClass").Worksheets("log").Columns(userIDcol).Find(What:=currDailyUserID, LookIn:=xlValues, LookAt:=xlWhole).Row
                        
                        If Workbooks("List-OnlineClass").Worksheets("log").Range(passDateCol & matchRow).Value = "" And Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & matchRow).Value = currDailyEmail Then
                            passes = passes + 1
                            temporary = Workbooks(dailyFileName).Worksheets(1).Range("S" & i).Value
                            
                            testPassDate = Mid(temporary, 6, 2) & "/" & Mid(temporary, 9, 2) & "/" & Left(temporary, 4)
                                                        
                            Workbooks("List-OnlineClass").Worksheets("log").Range(passDateCol & matchRow).Value = testPassDate
                        End If
                    End If
                    
                End If
            Next
            
            Workbooks(dailyFileName).Close savechanges:=False, fileName:=dailyFileName 'closing daily file
        End If
NextIteration:
        file = Dir
    Loop
    
    'if no file match today then print "there are no daily files matching today"
    If dailyFound = False Then
        MsgBox "Your Master Log Is Either Up To Date Or Please Check You've Downloaded Daily Files In The Same Folder As Your Master WorkBook", vbOKOnly + vbCritical, "Daily Files Not Found"
        Exit Sub
    End If
    
    If newEnrollments = 0 Then
    'if no new enrollments today
        Application.Wait (Now + TimeValue("0:00:01"))
        MsgBox "No New Enrollments Today", vbOKOnly + vbInformation, "Update Of Master Log Complete"
        
    Else
    'let user know update of master log is complete Update Of Master Log Complete
        Application.Wait (Now + TimeValue("0:00:01"))
        MsgBox newEnrollments & " New Enrollments From Across " & fileCount & " Daily Files!", vbOKOnly + vbInformation, "Update Of Master Log Complete"
    End If
    
    If passes = 0 Then
        MsgBox "No New Passes Today!" & vbCrLf & "Now starting survey response update", vbOKOnly + vbInformation, "Update"
    Else
        MsgBox passes & " New Passes Today!" & vbCrLf & "Now starting survey response update", vbOKOnly + vbInformation, "Update"
    End If
    
    Dim currLine
    For currLine = finalMasterRow - newEnrollments To finalMasterRow - 1
        insertEmailButton Workbooks("List-OnlineClass").Worksheets("log").Range(missingEmailCol & currLine)
        insertCertButton Workbooks("List-OnlineClass").Worksheets("log").Range(certCol & currLine)
        insertOptCertButton Workbooks("List-OnlineClass").Worksheets("log").Range(optCertCol & currLine)
    Next

    survResp
    
    Workbooks("List-OnlineClass").Worksheets("Menu").Range("A23").Value = Date
    
    ActiveWindow.Zoom = 105 ' Restore preferred zoom
    Workbooks("List-OnlineClass").Worksheets("Menu").Activate
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    
    ' Optional menu "repaint" hack
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollRow = 2
    ActiveWindow.ScrollRow = 3
    ActiveWindow.ScrollRow = 2
    ActiveWindow.ScrollRow = 1
    
    Workbooks("List-OnlineClass").Save
    
    'Resetting zoom window as requested by Dr. Bonaiti
    Workbooks("List-OnlineClass").Worksheets("log").Activate
    ActiveWindow.Zoom = 70
    
    Workbooks("List-OnlineClass").Worksheets("Menu").Activate
    ActiveWindow.Zoom = 75
    
    MsgBox "Daily enrollment and survey response updates are complete!", vbOKOnly + vbInformation, "Finished"
    
End Sub

'-----------------------------------------------------------------------------------------------------------------


'AUTO EMAIL-----------------------------------------------------------------------------------------------------
Sub missingEmail(currRow As Integer)
    'exactly what troubleshoot does, added this because on Dr. Bonaiti ends it requires him to troubleshoot everytime?
    getCols
    lastRow "List-OnlineClass", "log"
    removeKeyWord
    
    Dim EmailApp As Outlook.Application
    Set EmailApp = New Outlook.Application

    Dim EmailItem As Outlook.MailItem
    Set EmailItem = EmailApp.CreateItem(olMailItem)

    'Change the template file folder path according to your case
    Set EmailItem = EmailApp.CreateItemFromTemplate(ThisWorkbook.Path & "\HO to Learner (missing information).oft")

    EmailItem.To = Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & currRow).Value

    EmailItem.HTMLBody = Replace(EmailItem.HTMLBody, "LEARNERNAME", Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & currRow).Value & " " & Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & currRow).Value)

    EmailItem.Display

    Set EmailApp = Nothing
    Set EmailItem = Nothing
End Sub

'-----------------------------------------------------------------------------------------------------------------

'AUTO CERTIFICATION-----------------------------------------------------------------------------------------------

Sub makePDFs(inRow As Integer)

    'exactly what troubleshoot does, added this because on Dr. Bonaiti ends it requires him to troubleshoot everytime?
    getCols
    lastRow "List-OnlineClass", "log"
    removeKeyWord
    
    Dim outfolderPath
    outfolderPath = ThisWorkbook.Path + "\output\"
    
    Dim templateTab As Worksheet
    Dim fieldsTab As Worksheet
    Dim activeTab As Worksheet
    
    Set templateTab = Worksheets("Template")
    Set fieldsTab = Worksheets("Fields")
    Set activeTab = Worksheets("Active")
    
    'range of cells to replace in template
    Dim targetRangeToReplace As String
    targetRangeToReplace = "G14:G17"
    Dim replaceRange As Range
    Set replaceRange = activeTab.Range(targetRangeToReplace)
    Dim templateRange As Range
    Set templateRange = templateTab.Range(targetRangeToReplace)
    
    '(lastname)_(firstname).pdf column
    Dim fileName As String
    fileName = Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & inRow).Value, " ", "") & "_" & Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & inRow).Value, " ", "") & ".pdf"

    'variable for path to certificate folder
    Dim fullFilePath As String
    
    Dim pythonScriptPath As String

    'copies template and pastes it on the active tab
    templateRange.Copy replaceRange
    
    pythonScriptPath = ThisWorkbook.Path + "\"
    'for each variable in the fields tab
    Dim field As Range
    Dim Cell As Range
    
    For Each field In fieldsTab.Range(fieldsTab.Cells(2, 1), fieldsTab.Cells(fieldsTab.Cells(Rows.count, 1).End(xlUp).Row, 1))
        For Each Cell In replaceRange
            If InStr(Cell.Value, "date") = 0 Then
                Cell.Value = Replace(Cell.Value, field.Value, Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, flCol).Value)
            Else
                Cell.Value = Replace(Cell.Value, field.Value, Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, certDateCol).Value)
            End If
        Next Cell
    Next field
            
        
    'save to PDF
    'reassign the fullFilePath to the certificate folder
    fullFilePath = outfolderPath & fileName
    'Dim encryptedPath As String
    Dim encryptedPath
    encryptedPath = outfolderPath & "encrypted_" & fileName
        
    'encrypt the file
    activeTab.Range("A1:L30").ExportAsFixedFormat Type:=xlTypePDF, _
    fileName:= _
    fullFilePath, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, _
    From:=1, To:=1, _
    OpenAfterPublish:=False
        
    Debug.Print "Full File Path: " & fullFilePath
    Debug.Print "Encrypted Path: " & encryptedPath
    Debug.Print "Python Script Path: " & pythonScriptPath
    'call subroutine to execute python script to protect with password
    GeneratePDF fullFilePath, encryptedPath, pythonScriptPath
        
    'EMAIL SECTION
    Dim EmailApp As Outlook.Application
    Dim Source As String
    Set EmailApp = New Outlook.Application
    
    Dim EmailItem As Outlook.MailItem
    Set EmailItem = EmailApp.CreateItem(olMailItem)
    
    EmailItem.To = Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & inRow).Value  'learner email
    
    On Error Resume Next
    EmailItem.CC = Workbooks("List-OnlineClass").Worksheets("log").Range(ceaEmailCol & inRow).Value & ";" & Workbooks("List-OnlineClass").Worksheets("log").Range(ceaEmailCCCol & inRow).Value & ";" & Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value
    Dim office
    
    If IsError(Workbooks("List-OnlineClass").Worksheets("log").Range(ceaOfficeEmailCol & inRow).Value) Then
        office = "INSERT"
    Else
        office = Workbooks("List-OnlineClass").Worksheets("log").Range(ceaOfficeEmailCol & inRow).Value
    End If
    
    EmailItem.Subject = "Certificate for the Homeowner ATU Online Program"

    'body of the email TO LEARNER
    EmailItem.HTMLBody = "Dear " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, fNameCol).Value & " " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, lNameCol).Value & "," & "<br>" & "<br>" & _
    "Congratulations for completing the training ""Homeowner Maintenance of Aerobic Treatment Units"". " & _
    "We have processed your certificate and sent it to your County Extension Office. Please allow 2-3 business " & _
    " days from this email and then schedule an appointment with your County Extension Agent (" & _
    "CEA) to pick up your certificate. Remember to take with you a valid " & _
    "form of photo identification." & "<br>" & "<br>" & _
    "CEA Name: " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, ceaContactCol).Value & "<br>" & _
    "CEA Email: " & Workbooks("List-OnlineClass").Worksheets("log").Range(ceaEmailCol & inRow).Value & "<br>" & _
    "County Extension Website: " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, ceaWebsite).Value & "<br>" & "<br>" & _
    "Feel free to contact me if you have any questions." & "<br>" & "<br>" & _
    "Best Regards," & "<br>" & _
    "Gabriele Bonaiti" & "<br>" & _
    "p: +1 (979) 862-2593 | c: +1 (979) 922-4991 | f: +1 (979) 862-3442"

    EmailItem.Display
    Set EmailItem = Nothing

    'email to CEA
    Dim Email2
    Set Email2 = EmailApp.CreateItem(olMailItem)
    
    'On Error Resume Next
    Email2.To = Workbooks("List-OnlineClass").Worksheets("log").Range(ceaEmailCol & inRow).Value
    Email2.CC = Workbooks("List-OnlineClass").Worksheets("log").Range(ceaEmailCCCol & inRow).Value
    
    
    Email2.Subject = "Certificate for the Homeowner ATU Online Program"

    'body of the email TO CEA
    Email2.HTMLBody = "Dear " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, ceaContactCol).Value & "," & "<br>" & "<br>" & _
    "Please find attached certificate for the class ""Homeowner Maintenance of Aerobic Treatment Units"", " & _
    "which is not signed. Please sign it and have it ready for pick up by the learner at your office. " & _
    "We have also informed the learner and the local regulator via email about issuance of this certificate. " & _
    "<br>" & "<br>" & "Let me know if you have any questions." & "<br>" & "<br>" & _
    "Best Regards," & "<br>" & _
    "Gabriele Bonaiti" & "<br>" & _
    "p: +1 (979) 862-2593 | c: +1 (979) 922-4991 | f: +1 (979) 862-3442"

    'attachments
    Source = encryptedPath
    Email2.Attachments.Add Source

    Email2.Display
    Set Email2 = Nothing
    
    
End Sub

Sub makeOptPDFs(inRow As Integer)
    'exactly what troubleshoot does, added this because on Dr. Bonaiti ends it requires him to troubleshoot everytime?
    getCols
    lastRow "List-OnlineClass", "log"
    removeKeyWord
    
    'To prevent trying to generate a email/certificate for a leaner without proper DR Information
    If IsError(Workbooks("List-OnlineClass").Worksheets("log").Range(drContactCol & inRow).Value) Or _
       IsError(Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value) Then
            MsgBox "Please ensure the learner you are certifying has a corresponding " & _
           "DR Contact Name and DR Email.", vbExclamation, "Missing Information"
        Exit Sub
    End If
    
    Dim outfolderPath
    outfolderPath = ThisWorkbook.Path + "\output\"
    
    Dim templateTab As Worksheet
    Dim fieldsTab As Worksheet
    Dim activeTab As Worksheet
    
    Set templateTab = Worksheets("OptTemplate")
    Set fieldsTab = Worksheets("Fields")
    Set activeTab = Worksheets("OptActive")
    
    'range of cells to replace in template
    Dim targetRangeToReplace As String
    targetRangeToReplace = "G14:G17"
    Dim replaceRange As Range
    Set replaceRange = activeTab.Range(targetRangeToReplace)
    Dim templateRange As Range
    Set templateRange = templateTab.Range(targetRangeToReplace)
    
    '(lastname)_(firstname).pdf column
    Dim fileName As String
    fileName = Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & inRow).Value, " ", "") & "_" & Replace(Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & inRow).Value, " ", "") & ".pdf"

    'variable for path to certificate folder
    Dim fullFilePath As String
    
    Dim pythonScriptPath As String

            'copies template and pastes it on the active tab
    templateRange.Copy replaceRange
    
    pythonScriptPath = ThisWorkbook.Path + "\"
            'for each variable in the fields tab
    Dim field As Range
    Dim Cell As Range
    
    For Each field In fieldsTab.Range(fieldsTab.Cells(2, 1), fieldsTab.Cells(fieldsTab.Cells(Rows.count, 1).End(xlUp).Row, 1))
        For Each Cell In replaceRange
            If InStr(Cell.Value, "date") = 0 Then
                Cell.Value = Replace(Cell.Value, field.Value, Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, flCol).Value)
            Else
                Cell.Value = Replace(Cell.Value, field.Value, Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, certDateCol).Value)
            End If
        Next Cell
    Next field
            
        
    'save to PDF
    'reassign the fullFilePath to the certificate folder
    fullFilePath = outfolderPath & fileName
    'Dim encryptedPath As String
    Dim encryptedPath
    encryptedPath = outfolderPath & "encrypted_" & fileName
        
    'encrypt the file
    activeTab.Range("A1:L30").ExportAsFixedFormat Type:=xlTypePDF, _
    fileName:= _
    fullFilePath, _
    Quality:=xlQualityStandard, _
    IncludeDocProperties:=True, _
    IgnorePrintAreas:=False, _
    From:=1, To:=1, _
    OpenAfterPublish:=False
        
    Debug.Print "Full File Path: " & fullFilePath
    Debug.Print "Encrypted Path: " & encryptedPath
    Debug.Print "Python Script Path: " & pythonScriptPath
    'call subroutine to execute python script to protect with password
    GeneratePDF fullFilePath, encryptedPath, pythonScriptPath
    
    
    
    
    
    
    
    
    'EMAIL SECTION
    Dim EmailApp As Outlook.Application
    Dim Source As String
    Set EmailApp = New Outlook.Application
    
    Dim EmailItem As Outlook.MailItem
    Set EmailItem = EmailApp.CreateItem(olMailItem)
    
    EmailItem.To = Workbooks("List-OnlineClass").Worksheets("log").Range(emailCol & inRow).Value  'learner email
    EmailItem.CC = Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value 'CC email to DR
    
    On Error Resume Next
    Dim office
    
    If IsError(Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value) Then
        office = "INSERT"
    Else
        office = Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value
    End If
    
    EmailItem.Subject = "Certificate for the Homeowner ATU Online Program"

    'body of the email TO LEARNER
    EmailItem.HTMLBody = "Dear " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, fNameCol).Value & " " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, lNameCol).Value & "," & "<br>" & "<br>" & _
    "Congratulations for completing the training ""Homeowner Maintenance of Aerobic Treatment Units"". " & _
    "We have processed your certificate and sent it to your local regulator. Please allow 2-3 business " & _
    "days from this email and then schedule an appointment " & _
    "to pick up your certificate. Remember to take with you a valid " & _
    "form of photo identification." & "<br>" & "<br>" & _
    "Name: " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, drContactCol).Value & "<br>" & _
    "Email: " & Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value & "<br>" & _
    "Feel free to contact me if you have any questions." & "<br>" & "<br>" & _
    "Best Regards," & "<br>" & _
    "Gabriele Bonaiti" & "<br>" & _
    "p: +1 (979) 862-2593 | c: +1 (979) 922-4991 | f: +1 (979) 862-3442"

    EmailItem.Display
    Set EmailItem = Nothing

    'email to DR INSTEAD CEA
    Dim Email2
    Set Email2 = EmailApp.CreateItem(olMailItem)
    
    'On Error Resume Next
    Email2.To = Workbooks("List-OnlineClass").Worksheets("log").Range(drEmailCol & inRow).Value
    
    
    Email2.Subject = "Certificate for the Homeowner ATU Online Program"

    'body of the email TO DR INSTEAD OF CEA
    Email2.HTMLBody = "Dear " & Workbooks("List-OnlineClass").Worksheets("log").Cells(inRow, drContactCol).Value & "," & "<br>" & "<br>" & _
    "Please find attached certificate for the class ""Homeowner Maintenance of Aerobic Treatment Units"", " & _
    "Please print it and have it ready for pick up by the learner at your office. " & _
    "We have also informed the learner via email about issuance of this certificate. " & _
    "<br>" & "<br>" & "Let me know if you have any questions." & "<br>" & "<br>" & _
    "Best Regards," & "<br>" & _
    "Gabriele Bonaiti" & "<br>" & _
    "p: +1 (979) 862-2593 | c: +1 (979) 922-4991 | f: +1 (979) 862-3442"

    'attachments
    Source = encryptedPath
    Email2.Attachments.Add Source

    Email2.Display
    Set Email2 = Nothing
    
End Sub

Sub GeneratePDF(inputPath, outputPath, pythonScriptPath)

    Dim pythonPath As String
    Dim scriptPath As String
    Dim password As String
    Dim wsh As Object
    Dim cmd As String
    Dim q As String

    q = Chr(34) ' Double-quote character

    ' Full path to Python executable (update if needed)
    pythonPath = "python.exe" ' Or "C:\Path\To\Correct\Python\python.exe"

    ' Full path to your Python script
    scriptPath = pythonScriptPath & "password_protect_pdf.py"
    password = "HO"

    ' Create WScript Shell object
    Set wsh = CreateObject("WScript.Shell")

    ' Build command with safe quoting for each argument
    cmd = q & pythonPath & q & " " & _
          q & scriptPath & q & " " & _
          q & inputPath & q & " " & _
          q & outputPath & q & " " & _
          q & password & q

    Debug.Print "Running Command:"
    Debug.Print cmd

    ' Run the command synchronously (VBA waits for it to finish)
    wsh.Run cmd, 0, True

    ' Check for output file existence
    If Dir(outputPath) = "" Then
        MsgBox "Encrypted file doesn't exist. File Name: " & outputPath
    End If

End Sub

Sub insertEmailButton(Rng As Range)
    Dim ws
    Set ws = Workbooks("List-OnlineClass").Worksheets("log")
    
    Workbooks("List-OnlineClass").Worksheets("log").Activate
    
    Dim button
    Set button = ws.Shapes.AddShape(msoShapeRectangle, Rng.Left, Rng.Top, Rng.Width, Rng.Height)
    button.TextFrame.Characters.Text = "Email"
    button.TextFrame.Characters.Font.Color = RGB(255, 255, 255)
    button.TextFrame.Characters.Font.Size = 14
    button.Fill.ForeColor.RGB = RGB(80, 0, 0)
    button.OnAction = "'ThisWorkbook.missingEmail " & Rng.Row & "'"
    
End Sub

Sub insertCertButton(Rng As Range)
    Dim ws
    Set ws = Workbooks("List-OnlineClass").Worksheets("log")
    
    Workbooks("List-OnlineClass").Worksheets("log").Activate
    
    'places original certificate button
    Dim button
    Set button = ws.Shapes.AddShape(msoShapeRectangle, Rng.Left, Rng.Top, Rng.Width, Rng.Height)
    button.TextFrame.Characters.Text = "Cert"
    button.TextFrame.Characters.Font.Color = RGB(255, 255, 255)
    button.TextFrame.Characters.Font.Size = 14
    button.Fill.ForeColor.RGB = RGB(80, 0, 0)
    button.OnAction = "'ThisWorkbook.makePDFs " & Rng.Row & "'"
    
End Sub

Sub insertOptCertButton(Rng As Range)
    Dim ws
    Set ws = Workbooks("List-OnlineClass").Worksheets("log")
    
    Workbooks("List-OnlineClass").Worksheets("log").Activate
    
    'places optional certificate button
    Dim button
    Set button = ws.Shapes.AddShape(msoShapeRectangle, Rng.Left, Rng.Top, Rng.Width, Rng.Height)
    button.TextFrame.Characters.Text = "Opt Cert"
    button.TextFrame.Characters.Font.Color = RGB(255, 255, 255)
    button.TextFrame.Characters.Font.Size = 14
    button.Fill.ForeColor.RGB = RGB(80, 0, 0)
    button.OnAction = "'ThisWorkbook.makeOptPDFs " & Rng.Row & "'"
    
    'refine efficency of button placement (circumvent the process of stopping, adding, then resuming for every/batch of buttons)
    'TBD

End Sub

Sub DeleteShapesOnSheet()
'DANGEROUS METHOD, WILL ERASE ALL PREVIOUSLY PLACED Cert and Email Buttons
'    'delete any previous shapes added
'    Dim W As Worksheet
'    Dim s As Shape
'    'refer to a given worksheet
'    Set W = ActiveSheet
'    'delete all of the shapes on it
'    For Each s In W.Shapes
'    s.Delete
'    Next s

End Sub

'-----------------------------------------------------------------------------------------------------------------

Sub testFunc()
    'Test here
End Sub

Sub revertToDefault()
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With

    Dim Cell
    Dim temp
    For Each Cell In Selection.Cells
        If Cell.Formula <> "" Then
            temp = Cell.Value
            Cell.Formula = ""
            Cell.Value = temp
        End If
    Next Cell
    Selection.Value = Selection.Value
    
End Sub

'this is the troubleshoot function, when ran it'll reassign all global variables their values
'This often solves the problem of global variables losing their reference
Sub troubleshoot()
    getCols
    lastRow "List-OnlineClass", "log"
    removeKeyWord
    MsgBox "Please Save Your File And Resume The Process You Were Doing", vbOKOnly + vbInformation, "Troubleshooting Complete"
End Sub

Sub readd()
    getCols
    Dim o
    For o = 609 To 657
        insertEmailButton Workbooks("List-OnlineClass").Worksheets("log").Range(missingEmailCol & o)
        insertCertButton Workbooks("List-OnlineClass").Worksheets("log").Range(certCol & o)
    Next
End Sub

Sub missingName()
    'Deprecated Function to check for users with IDs but no names
    Application.ScreenUpdating = False
    ActiveWindow.Zoom = 100 'Set zoom at 100% to avoid positioning errors
    
    getCols

    lastRow "List-OnlineClass", "log"
    
    Dim names As String
    Dim Cell As Range
    Dim count As Integer
    count = 0
    For Each Cell In Workbooks("List-OnlineClass").Worksheets("log").Range(userIDcol & 2, userIDcol & finalMasterRow)
        If Cell.Value = "" Or InStr(Cell.Value, "/") <> 0 Then
            count = count + 1
            If count Mod 2 = 0 Then
                names = names & vbLf & (LCase(Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & Cell.Row).Value) & " " & LCase(Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & Cell.Row).Value))
            Else
                names = names & " - " & (LCase(Workbooks("List-OnlineClass").Worksheets("log").Range(fNameCol & Cell.Row).Value) & " " & LCase(Workbooks("List-OnlineClass").Worksheets("log").Range(lNameCol & Cell.Row).Value))
            End If
            
        End If
    Next Cell
    Range("A" & 862).Value = names
    MsgBox "" & names, vbOKOnly + vbInformation, "Missing Names"
End Sub

Sub survResp()
    Application.ScreenUpdating = False
    ActiveWindow.Zoom = 100 'Set zoom at 100% to avoid positioning errors
    
    getCols

    lastRow "List-OnlineClass", "log"
    
    Dim surveyFound As Boolean
    surveyFound = False
    
    getNames
    
    Dim missingIDs As String
    missingIDs = ""
    
    Dim count As Integer
    Dim currMasterRow As Integer
    
    Dim fileCount As Integer
    Dim systemDate As String
    Dim Cell As Range
    systemDate = Date
    'generate date in file name
    
    'if generated date from file is new relative to last update, use that file
    'Note: using right function to start from right and get date, +3 to acccount for .csv
    'Note: standard daily file name format as follows; survey_responses_2025-06-18.csv
    Dim file As String
    Dim fileMonth As String
    Dim fileDay As String
    Dim fileYear As String
    
    'Helpful https://stackoverflow.com/questions/10380312/loop-through-files-in-a-folder-using-vba
    folderPath = ThisWorkbook.Path + "\"
    file = Dir(folderPath)
    Do While Len(file) > 0
        If InStr(file, "survey") = 0 Then
            GoTo NextIteration
        End If
        
        fileDay = Left(Right(file, 6), 2)
        fileMonth = Left(Right(file, 9), 2)
        fileYear = Left(Right(file, 14), 4)
        
        Dim fileDate
        fileDate = fileMonth & "/" & fileDay & "/" & fileYear
        
        'update master log with new data here, then iterate to next
        If (CDate(fileDate) >= CDate(Workbooks("List-OnlineClass").Worksheets("Menu").Range("A23").Value)) Then
            surveyFound = True
            surveyFile = file
            fileCount = fileCount + 1
            
            
            lastRow surveyFile, 1
            For Each Cell In Workbooks(surveyFile).Worksheets(1).Range("I" & 2, "I" & finalSurveyRow)
                'find UserID
                If Workbooks("List-OnlineClass").Worksheets("log").Columns(userIDcol).Find(What:=Cell.Value, LookIn:=xlFormulas, LookAt _
                :=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
                False, SearchFormat:=False) Is Nothing Then
                    
                    'Likely Missing User ID, col G+H (First+Last)
                    count = count + 1
                    If count Mod 2 = 0 Then
                        missingIDs = missingIDs & vbLf & (LCase(Workbooks(surveyFile).Worksheets(1).Range("G" & Cell.Row).Value) & " " & LCase(Workbooks(surveyFile).Worksheets(1).Range("H" & Cell.Row).Value)) & "-" & Cell.Value
                    Else
                        missingIDs = missingIDs & " - " & (LCase(Workbooks(surveyFile).Worksheets(1).Range("G" & Cell.Row).Value) & " " & LCase(Workbooks(surveyFile).Worksheets(1).Range("H" & Cell.Row).Value)) & "-" & Cell.Value
                    End If
                    
                    'Still able to add using name, just notify them which is missing user ID though
                Else
            
                    'Insert Data
                    currMasterRow = Workbooks("List-OnlineClass").Worksheets("log").Columns(userIDcol).Find(What:=Cell.Value, LookIn:=xlFormulas, LookAt _
                :=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
                False, SearchFormat:=False).Row
                    
                    'enter the date of the assignment (first purple column),
                    Workbooks("List-OnlineClass").Worksheets("log").Range(purpCol & currMasterRow).Value = Workbooks(surveyFile).Worksheets(1).Range("F" & Cell.Row).Value
                    'system manufacturer/Technology,
                    
                    Dim rawText As String
                    Dim cleanText As String
                    
                    rawText = Workbooks(surveyFile).Worksheets(1).Range("M" & Cell.Row).Value
                    
                    ' If there is a "(", take everything before it
                    If InStr(rawText, "(") > 0 Then
                        cleanText = Trim(Left(rawText, InStr(rawText, "(") - 1))
                    Else
                        cleanText = rawText
                    End If
                    
                    Workbooks("List-OnlineClass").Worksheets("log").Range(manufCol & currMasterRow).Value = cleanText

                    'AA (Authorized Agent) surv resp col S --> AA col
                    Workbooks("List-OnlineClass").Worksheets("log").Range(AuthAgentCol & currMasterRow).Value = Workbooks(surveyFile).Worksheets(1).Range("S" & Cell.Row).Value
                    'Issues Col R + Q + P --> Col U (notes)
                    Dim Notes
                    Notes = Workbooks(surveyFile).Worksheets(1).Range("R" & Cell.Row).Value & " - " & _
                    Workbooks(surveyFile).Worksheets(1).Range("Q" & Cell.Row).Value & " - " & _
                    Workbooks(surveyFile).Worksheets(1).Range("P" & Cell.Row).Value
                    Workbooks("List-OnlineClass").Worksheets("log").Range(notesCol & currMasterRow).Value = Notes
                    
                End If
            Next Cell
            
            
            
            
            
            
            Workbooks(surveyFile).Close savechanges:=False, fileName:=surveyFile 'closing survey file
        End If
NextIteration:
        file = Dir
    Loop
    
    
    'if no file match today then print "there are no daily files matching today"
    If surveyFound = False Then
        MsgBox "Your Master Log Is Either Up To Date Or Please Check You've Downloaded SURVEY Files In The Same Folder As Your Master WorkBook", vbOKOnly + vbCritical, "SURVEY Files Not Found"
        Exit Sub
    End If
       
    If Len(missingIDs) <> 0 Then
        MsgBox "" & missingIDs, vbOKOnly + vbInformation, "Likely Missing UserID in Master Log"
    End If
       
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollRow = 2
    ActiveWindow.ScrollRow = 3
    ActiveWindow.ScrollRow = 2
    ActiveWindow.ScrollRow = 1
    
    Workbooks("List-OnlineClass").Save
    
    'Resetting zoom window as requested by Dr. Bonaiti
    Workbooks("List-OnlineClass").Worksheets("log").Activate
    ActiveWindow.Zoom = 70
    
    Workbooks("List-OnlineClass").Worksheets("Menu").Activate
    ActiveWindow.Zoom = 75
    
End Sub

Sub addNewCert()
    getCols
    '1200 to 1242
    Dim currLine
    For currLine = 1200 To 1242
        insertOptCertButton Workbooks("List-OnlineClass").Worksheets("log").Range(optCertCol & currLine)
    Next
    
End Sub


